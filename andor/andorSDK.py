import ctypes
import numpy
import warnings

c_int32_p = ctypes.POINTER(ctypes.c_int32)
c_int32 = ctypes.c_int32
c_int16_p = ctypes.POINTER(ctypes.c_int16)
c_int16 = ctypes.c_int16
c_float_p = ctypes.POINTER(ctypes.c_float)
c_float = ctypes.c_float
c_double_p = ctypes.POINTER(ctypes.c_double)
c_double = ctypes.c_double
c_char_p = ctypes.c_char_p
c_byte_p = ctypes.POINTER(ctypes.c_byte)
c_byte = ctypes.c_byte

__atmcd32d__ = ctypes.windll.LoadLibrary('atmcd32d.dll')

class AndorCapabilities(ctypes.Structure):
    _fields_ = [('ulSize', c_int32),
                ('ulAcqModes', c_int32),
                ('ulReadModes', c_int32),
                ('ulTriggerModes', c_int32),
                ('ulCameraType', c_int32),
                ('ulPixelMode', c_int32),
                ('ulSetFunctions', c_int32),
                ('ulGetFunctions', c_int32),
                ('ulFeatures', c_int32),
                ('ulPCICard', c_int32),
                ('ulEMGainCapability', c_int32),
                ('ulFTReadModes', c_int32)]

class ColorDemosaicInfo(ctypes.Structure):
    _fields_ = [('iX', c_int32),
                ('iY', c_int32),
                ('iAlgorithm', c_int32),
                ('iXPhase', c_int32),
                ('iYPhase', c_int32),
                ('iBackground', c_int32)]

class WhiteBalanceInfo(ctypes.Structure):
    _fields_ = [('iSize', c_int32),
                ('iX', c_int32),
                ('iY', c_int32),
                ('iAlgorithm', c_int32),
                ('iROI_left',c_int32),
                ('iROI_right', c_int32),
                ('iROI_top', c_int32),
                ('iROI_bottom', c_int32),
                ('iOperation', c_int32)]
    
class SystemTime(ctypes.Structure):
    _fields_ = [('wYear', c_int16),
                ('wMonth', c_int16),
                ('wDayOfWeek', c_int16),
                ('wDay', c_int16),
                ('wHour', c_int16),
                ('wMinute', c_int16),
                ('wSecond', c_int16),
                ('wMilliseconds', c_int16)]

def function(argtypes, restype = c_int32):
    return {'argtypes':argtypes, 'restype':restype}

functions = {'AbortAcquisition' : function([]),
             'CancelWait' : function([]),
             'CoolerOFF' : function([]),
             'CoolerON' : function([]),
             'DemosaicImage' : function([c_int16_p, c_int16_p, c_int16_p, c_int16_p, ctypes.POINTER(ColorDemosaicInfo)]), #NEEDS WORK
             'EnableKeepCleans' : function([c_int32]),
             'EnableSensorCompensation' : function([c_int32]),
             'SetIRIGModulation' : function([c_char_p]),
             'FreeInternalMemory' : function([]),
             'GetAcquiredData' : function([c_int32_p, c_int32]),
             'GetAcquiredData16' : function([c_int16_p, c_int32]),
             'GetAcquiredFloatData' : function([c_float_p, c_int32]),
             'GetAcquisitionProgress' : function([c_int32_p, c_int32_p]),
             'GetAcquisitionTimings' : function([c_float_p, c_float_p, c_float_p]),
             'GetAdjustedRingExposureTimes' : function([c_int32, c_float_p]),
             'GetAllDMAData' : function([c_int32_p, c_int32]),
             'GetAmpDesc' : function([c_int32, c_char_p, c_int32]),
             'GetAmpMaxSpeed' : function([c_int32, c_float_p]),
             'GetAvailableCameras' : function([c_int32_p]), 
             'GetBackground' : function([c_int32_p, c_int32]),
             'GetBaselineClamp' : function([c_int32_p]),
             'GetBitDepth' : function([c_int32, c_int32_p]),
             'GetCameraEventStatus' : function([c_int32_p]),
             'GetCameraHandle' : function([c_int32, c_int32_p]),
             'GetCameraInformation' : function([c_int32, c_int32_p]),
             'GetCameraSerialNumber' : function([c_int32_p]),
             'GetCapabilities' : function([ctypes.POINTER(AndorCapabilities)]), #NEEDS WORK
             'GetControllerCardModel' : function([c_char_p]),
             'GetCountConvertWavelengthRange' : function([c_float_p, c_float_p]),
             'GetCurrentCamera' : function([c_int32_p]),
             'GetCYMGShift' : function([c_int32_p, c_int32_p]),
             'GetDDGExternalOutputEnabled' : function([c_int32, c_int32_p]),
             'GetDDGExternalOutputPolarity' : function([c_int32, c_int32_p]),
             'GetDDGExternalOutputStepEnabled' : function([c_int32, c_int32_p]),
             'GetDDGInsertionDelay' : function([c_int32_p]),
             'GetDDGIntelligate' : function([c_int32_p]),
             'GetDDGIOC' : function([c_int32_p]),
             'GetDDGIOCFrequency' : function([c_double_p]),
             'GetDDGIOCNumber' : function([c_int32_p]),
             'GetDDGIOCNumberRequested' : function([c_int32_p]),
             'GetDDGIOCPulses' : function([c_int32_p]),
             'GetDDGIOCTrigger' : function([c_int32_p]),
             'GetDDGOpticalWidthEnabled' : function([c_int32_p]),

             # DDG Lite functions 
             'GetDDGLiteGlobalControlByte' : function([c_byte_p]),
             #'GetDDGLiteControlByte' : function([ As AT_DDGLiteChannelId, c_byte_p]), #NEEDS WORK
             #'GetDDGLiteInitialDelay' : function([As AT_DDGLiteChannelId, c_float_p]), #same!
             #'GetDDGLitePulseWidth' : function([As AT_DDGLiteChannelId, c_float_p]), #same
             #'GetDDGLiteInterPulseDelay' : function([As AT_DDGLiteChannelId, c_float_p]), #same 
             #'GetDDGLitePulsesPerExposure' : function([As AT_DDGLiteChannelId, c_int32_p]), #same
             
             'GetDDGPulse' : function([c_double, c_double, c_double_p, c_double_p]),
             'GetDDGStepCoefficients' : function([c_int32, c_double_p, c_double_p]),
             'GetDDGWidthStepCoefficients' : function([c_int32, c_double_p, c_double_p]),
             'GetDDGStepMode' : function([c_int32_p]),
             'GetDDGWidthStepMode' : function([c_int32_p]),
             'GetDetector' : function([c_int32_p, c_int32_p]),
             'GetDICameraInfo' : function([c_int32_p]),
             'GetEMAdvanced' : function([c_int32_p]),
             'GetEMCCDGain' : function([c_int32_p]),
             'GetEMGainRange' : function([c_int32_p, c_int32_p]),
             'GetExternalTriggerTermination' : function([c_int32_p]),
             'GetFastestRecommendedVSSpeed' : function([c_int32_p, c_float_p]),
             'GetFIFOUsage' : function([c_int32_p]),
             'GetFilterMode' : function([c_int32_p]),
             'GetFKExposureTime' : function([c_float_p]),
             'GetFKVShiftSpeed' : function([c_int32, c_int32_p]),
             'GetFKVShiftSpeedF' : function([c_int32, c_float_p]),
             'GetFrontEndStatus' : function([c_int32_p]),
             'GetGateMode' : function([c_int32_p]),
             'GetHardwareVersion' : function([c_int32_p, c_int32_p, c_int32_p, c_int32_p, c_int32_p, c_int32_p]),
             'GetHeadModel' : function([c_char_p]),
             'GetHorizontalSpeed' : function([c_int32, c_int32_p]),
             'GetHSSpeed' : function([c_int32, c_int32, c_int32, c_float_p]),
             'GetHVflag' : function([c_int32_p]),
             'GetID' : function([c_int32, c_int32_p]),
             'GetImageFlip' : function([c_int32_p, c_int32_p]),
             'GetImageRotate' : function([c_int32_p]),
             'GetImages' : function([c_int32, c_int32, c_int32_p, c_int32, c_int32_p, c_int32_p]),
             'GetImages16' : function([c_int32, c_int32, c_int16_p, c_int32, c_int32_p, c_int32_p]),
             'GetImagesPerDMA' : function([c_int32_p]),
             'GetIRQ' : function([c_int32_p]),
             'GetKeepCleanTime' : function([c_float_p]),
             'GetMaximumBinning' : function([c_int32, c_int32, c_int32_p]),
             'GetMaximumExposure' : function([c_float_p]),
             'GetMaximumNumberRingExposureTimes' : function([c_int32_p]),
             'GetMCPGain' : function([c_int32_p]),
             'GetMCPGainRange' : function([c_int32_p, c_int32_p]),
             'GetMCPGainTable' : function([c_int32, c_int32_p, c_float_p]),
             'GetMCPVoltage' : function([c_int32_p]),
             'GetMinimumImageLength' : function([c_int32_p]),
             'GetMinimumNumberInSeries' : function([c_int32_p]),
             'GetMostRecentColorImage16' : function([c_int32, c_int32, c_int16_p, c_int16_p, c_int16_p]),
             'GetMostRecentImage' : function([c_int32_p, c_int32]),
             'GetMostRecentImage16' : function([c_int16_p, c_int32]),
             'GetMSTimingsData' : function([ctypes.POINTER(SystemTime), c_float_p, c_int32]), #NEEDS WORK
             'GetMetaDataInfo' : function([ctypes.POINTER(SystemTime), c_float_p, c_int32]), #erm
             'GetMSTimingsEnabled' : function([]),
             'GetNewData' : function([c_int32_p, c_int32]),
             'GetNewData16' : function([c_int16_p, c_int32]),
             'GetNewData8' : function([c_byte_p, c_int32]),
             'GetNewFloatData' : function([c_float_p, c_int32]),
             'GetNumberADChannels' : function([c_int32_p]),
             'GetNumberAmp' : function([c_int32_p]),
             'GetNumberAvailableImages' : function([c_int32_p, c_int32_p]),
             'GetNumberDDGExternalOutputs' : function([c_int32_p]),
             'GetNumberDevices' : function([c_int32_p]),
             'GetNumberFKVShiftSpeeds' : function([c_int32_p]),
             'GetNumberHorizontalSpeeds' : function([c_int32_p]),
             'GetNumberHSSpeeds' : function([c_int32, c_int32, c_int32_p]),
             #GetNumberMissedExternalTriggers : function([c_int32, c_int32, c_int16_p, c_int32]),
             #GetIRIGData : function([c_byte_p, c_int32]),
             'GetNumberNewImages' : function([c_int32_p, c_int32_p]),
             'GetNumberPhotonCountingDivisions' : function([c_int32_p]),
             'GetNumberPreAmpGains' : function([c_int32_p]),
             'GetNumberRingExposureTimes' : function([c_int32_p]),
             'GetNumberIO' : function([c_int32_p]),
             'GetNumberVerticalSpeeds' : function([c_int32_p]),
             'GetNumberVSAmplitudes' : function([c_int32_p]),
             'GetNumberVSSpeeds' : function([c_int32_p]),
             'GetOldestImage' : function([c_int32_p, c_int32]),
             'GetOldestImage16' : function([c_int16_p, c_int32]),
             'GetPhosphorStatus' : function([c_int32_p]),
             'GetPhysicalDMAAddress' : function([c_int32_p, c_int32_p]),
             'GetPixelSize' : function([c_float_p, c_float_p]),
             'GetPreAmpGain' : function([c_int32, c_float_p]),
             'GetPreAmpGainText' : function([c_int32, c_char_p, c_int32]),
             'GetDualExposureTimes' : function([c_float_p, c_float_p]),
             'GetQE' : function([c_char_p, c_float, c_int32, c_float_p]),
             'GetReadOutTime' : function([c_float_p]),
             'GetRegisterDump' : function([c_int32_p]),
             #GetRelativeImageTimes : function([ c_int32, c_int32, c_int32_p, c_int32_p, c_int32]),
             'GetRingExposureRange' : function([c_float_p, c_float_p]),
             'GetSDK3Handle' : function([c_int32_p]),
             'GetSensitivity' : function([c_int32, c_int32, c_int32, c_int32, c_float_p]),
             'GetShutterMinTimes' : function([c_int32_p, c_int32_p]),
             'GetSizeOfCircularBuffer' : function([c_int32_p]),
             'GetSlotBusDeviceFunction' : function([c_int32_p, c_int32_p, c_int32_p, c_int32_p]),
             'GetSoftwareVersion' : function([c_int32_p, c_int32_p, c_int32_p, c_int32_p, c_int32_p, c_int32_p]),
             'GetSpoolProgress' : function([c_int32_p]),
             'GetStartUpTime' : function([c_float_p]),
             'GetStatus' : function([c_int32_p]),
             'GetTECStatus' : function([c_int32_p]),
             'GetTemperature' : function([c_int32_p]),
             'GetTemperatureF' : function([c_float_p]),
             'GetTemperatureRange' : function([c_int32_p, c_int32_p]),
             'GetTemperaturePrecision' : function([c_int32_p]),
             'GetTemperatureStatus' : function([c_float_p, c_float_p, c_int32_p, c_int32_p]),
             'GetTotalNumberImagesAcquired' : function([c_int32_p]),
             'GetIODirection' : function([c_int32, c_int32_p]),
             'GetIOLevel' : function([c_int32, c_int32_p]),
             #GetUSBDeviceDetails : function([c_int16_p, c_int16_p, c_int16_p, c_int16_p]),
             #'GetVersionInfo' : function([As AT_VersionInfoId, c_char_p, c_int32]), #NEEDS WORK
             'GetVerticalSpeed' : function([c_int32, c_int32_p]),
             'GetVirtualDMAAddress' : function([c_int32, c_int32]),
             'GetVSAmplitudeString' : function([c_int32, c_char_p]),
             'GetVSAmplitudeFromString' : function([c_char_p, c_int32_p]),
             'GetVSAmplitudeValue' : function([c_int32, c_int32_p]),
             'GetVSSpeed' : function([c_int32, c_float_p]),
             'GPIBReceive' : function([c_int32, c_int16, c_char_p, c_int32]),
             'GPIBSend' : function([c_int32, c_int16, c_char_p]),
             'I2CBurstRead' : function([c_byte, c_int32, c_byte_p]),
             'I2CBurstWrite' : function([c_byte, c_int32, c_byte_p]),
             'I2CRead' : function([c_byte, c_byte, c_byte_p]),
             'I2CReset' : function([]),
             'I2CWrite' : function([c_byte, c_byte, c_byte]),
             'IdAndorDll' : function([]),
             'InAuxPort' : function([c_int32, c_int32_p]),
             'Initialize' : function([c_char_p]),
             'InitializeDevice' : function([c_char_p]),
             'IsAmplifierAvailable' : function([c_int32]),
             'IsCoolerOn' : function([c_int32_p]),
             'IsCountConvertModeAvailable' : function([c_int32]),
             'IsInternalMechanicalShutter' : function([c_int32_p]),
             'IsPreAmpGainAvailable' : function([c_int32, c_int32, c_int32, c_int32, c_int32_p]),
             'IsReadoutFlippedByAmplifier' : function([c_int32, c_int32_p]),
             'IsTriggerModeAvailable' : function([c_int32]),
             'Merge' : function([c_int32_p, c_int32, c_int32, c_int32, c_float_p, c_int32, c_int32, c_int32_p, c_float_p, c_float_p]),
             'OutAuxPort' : function([ c_int32, c_int32]),
             'PrepareAcquisition' : function([]),
             'SaveAsBmp' : function([c_char_p, c_char_p, c_int32, c_int32]),
             'SaveAsCommentedSif' : function([c_char_p, c_char_p]),
             'SaveAsEDF' : function([c_char_p, c_int32]),
             'SaveAsFITS' : function([c_char_p, c_int32]),
             'SaveAsRaw' : function([c_char_p, c_int32]),
             'SaveAsSif' : function([c_char_p]),
             'SaveAsSPC' : function([c_char_p]),
             'SaveAsTiff' : function([c_char_p, c_char_p, c_int32, c_int32]),
             'SaveAsTiffEx' : function([c_char_p, c_char_p, c_int32, c_int32, c_int32]),
             'SaveEEPROMToFile' : function([c_char_p]),
             'SaveToClipBoard' : function([c_char_p]),
             'SelectDevice' : function([c_int32]),
             'SendSoftwareTrigger' : function([]),
             'SetAccumulationCycleTime' : function([c_float]),
             'SetAcqStatusEvent' : function([c_int32]),
             'SetAcquisitionMode' : function([c_int32]),
             'SetSensorPortMode' : function([c_int32]),
             'SelectSensorPort' : function([c_int32]),
             'SetAcquisitionType' : function([c_int32]),
             'SetADChannel' : function([c_int32]),
             'SetAdvancedTriggerModeState' : function([c_int32]),
             'SetBackground' : function([c_int32_p, c_int32]),
             'SetBaselineClamp' : function([c_int32]),
             'SetBaselineOffset' : function([c_int32]),
             'SetCameraLinkMode' : function([c_int32]),
             'SetCameraStatusEnable' : function([c_int32]),
             'SetChargeShifting' : function([c_int32, c_int32]),
             'SetComplexImage' : function([c_int32, c_int32_p]),
             'SetCoolerMode' : function([c_int32]),
             'SetCountConvertMode' : function([c_int32]),
             'SetCountConvertWavelength' : function([c_float]),
             'SetCropMode' : function([c_int32, c_int32, c_int32]),
             'SetCurrentCamera' : function([c_int32]),
             'SetCustomTrackHBin' : function([c_int32]),
             'SetDataType' : function([c_int32]),
             'SetDACOutput' : function([c_int32, c_int32, c_int32]),
             'SetDACOutputScale' : function([c_int32]),
             'SetDDGAddress' : function([c_byte, c_byte, c_byte, c_byte, c_byte]),
             'SetDDGExternalOutputEnabled' : function([c_int32, c_int32]),
             'SetDDGExternalOutputPolarity' : function([c_int32, c_int32]),
             'SetDDGExternalOutputStepEnabled' : function([c_int32, c_int32]),
             'SetDDGGain' : function([c_int32]),
             'SetDDGGateStep' : function([c_double]),
             'SetDDGInsertionDelay' : function([c_int32]),
             'SetDDGIntelligate' : function([c_int32]),
             'SetDDGIOC' : function([c_int32]),
             'SetDDGIOCFrequency' : function([c_double]),
             'SetDDGIOCNumber' : function([c_int32]),
             'SetDDGIOCTrigger' : function([c_int32]),
             'SetDDGOpticalWidthEnabled' : function([c_int32]),

             # DDG Lite functions 
             #'SetDDGLiteGlobalControlByte' : function([c_byte]), #NEEDS WORK
             #'SetDDGLiteControlByte' : function([As AT_DDGLiteChannelId, c_byte]), #same
             #'SetDDGLiteInitialDelay' : function([As AT_DDGLiteChannelId, c_float]), #same
             #'SetDDGLitePulseWidth' : function([As AT_DDGLiteChannelId, c_float]), #same
             #'SetDDGLiteInterPulseDelay' : function([As AT_DDGLiteChannelId, c_float]), #same
             #'SetDDGLitePulsesPerExposure' : function([As AT_DDGLiteChannelId, c_int32]), #same
             
             'SetDDGStepCoefficients' : function([c_int32, c_double, c_double]),
             'SetDDGWidthStepCoefficients' : function([c_int32, c_double, c_double]),
             'SetDDGStepMode' : function([c_int32]),
             'SetDDGWidthStepMode' : function([c_int32]),
             'SetDDGTimes' : function([c_double, c_double, c_double]),
             'SetDDGTriggerMode' : function([c_int32]),
             'SetDDGVariableGateStep' : function([c_int32, c_double, c_double]),
             'SetDelayGenerator' : function([c_int32, c_int16, c_int32]),
             'SetDMAParameters' : function([c_int32, c_float]),
             'SetDriverEvent' : function([c_int32]),
             'SetEMAdvanced' : function([c_int32]),
             'SetEMCCDGain' : function([c_int32]),
             'SetEMClockCompensation' : function([c_int32]),
             'SetEMGainMode' : function([c_int32]),
             'SetExposureTime' : function([c_float]),
             'SetExternalTriggerTermination' : function([c_int32]),
             'SetFanMode' : function([c_int32]),
             'SetFastExtTrigger' : function([c_int32]),
             'SetFastKinetics' : function([c_int32, c_int32, c_float, c_int32, c_int32, c_int32]),
             'SetFastKineticsEx' : function([c_int32, c_int32, c_float, c_int32, c_int32, c_int32, c_int32]),
             'SetFastKineticsStorageMode' : function([c_int32]),
             'SetFastKineticsTimeScanMode' : function([c_int32, c_int32, c_int32]),
             'SetFilterMode' : function([c_int32]),
             'SetFilterParameters' : function([c_int32, c_float, c_int32, c_float, c_int32, c_int32]),
             'SetFKVShiftSpeed' : function([c_int32]),
             'SetFPDP' : function([c_int32]),
             'SetFrameTransferMode' : function([c_int32]),
             'SetFrontEndEvent' : function([c_int32]),
             'SetFullImage' : function([c_int32, c_int32]),
             'SetFVBHBin' : function([c_int32]),
             'SetGain' : function([c_int32]),
             'SetGate' : function([c_float, c_float, c_float]),
             'SetGateMode' : function([c_int32]),
             'SetHighCapacity' : function([c_int32]),
             'SetHorizontalSpeed' : function([c_int32]),
             'SetHSSpeed' : function([c_int32, c_int32]),
             'SetImage' : function([c_int32, c_int32, c_int32, c_int32, c_int32, c_int32]),
             'SetImageFlip' : function([c_int32, c_int32]),
             'SetImageRotate' : function([c_int32]),
             'SetIsolatedCropMode' : function([c_int32, c_int32, c_int32, c_int32, c_int32]),
             'SetIsolatedCropModeEx' : function([c_int32, c_int32, c_int32, c_int32, c_int32, c_int32, c_int32]),
             'SetKineticCycleTime' : function([c_float]),
             'SetMCPGain' : function([c_int32]),
             'SetMCPGating' : function([c_int32]),
             'SetMessageWindow' : function([c_int32]),
             'SetMetaData' : function([c_int32]),
             'SetMultiTrack' : function([c_int32, c_int32, c_int32, c_int32_p, c_int32_p]),
             'SetMultiTrackHBin' : function([c_int32]),
             'SetMultiTrackHRange' : function([c_int32, c_int32]),
             'SetMultiTrackScan' : function([c_int32, c_int32, c_int32, c_int32, c_int32, c_int32, c_int32, c_int32, c_int32, c_int32]),
             'SetNextAddress' : function([c_int32_p, c_int32, c_int32, c_int32, c_int32]),
             'SetNextAddress16' : function([c_int32_p, c_int32, c_int32, c_int32, c_int32]),
             'SetNumberAccumulations' : function([c_int32]),
             'SetNumberKinetics' : function([c_int32]),
             'SetNumberPrescans' : function([c_int32]),
             'SetOutputAmplifier' : function([c_int32]),
             'SetOverlapMode' : function([c_int32]),
             'SetPCIMode' : function([c_int32, c_int32]),
             'SetPhotonCounting' : function([c_int32]),
             'SetPhotonCountingThreshold' : function([c_int32, c_int32]),
             'SetPhosphorEvent' : function([c_int32_p]),
             'SetPhotonCountingDivisions' : function([c_int32, c_int32_p]),
             'SetPixelMode' : function([c_int32, c_int32]),
             'SetPreAmpGain' : function([c_int32]),
             'SetDualExposureTimes' : function([c_float, c_float]),
             'SetDualExposureMode' : function([c_int32]),
             'SetRandomTracks' : function([c_int32, c_int32_p]),
             'SetReadMode' : function([c_int32]),
             'SetReadoutRegisterPacking' : function([c_int32]),
             'SetRegisterDump' : function([c_int32]),
             'SetRingExposureTimes' : function([c_int32, c_float_p]),
             'SetSaturationEvent' : function([c_int32]),
             'SetShutter' : function([c_int32, c_int32, c_int32, c_int32]),
             'SetShutterEx' : function([c_int32, c_int32, c_int32, c_int32, c_int32]),
             'SetShutters' : function([c_int32, c_int32, c_int32, c_int32, c_int32, c_int32, c_int32, c_int32]),
             'SetSifComment' : function([ c_char_p]),
             'SetSingleTrack' : function([c_int32, c_int32]),
             'SetSingleTrackHBin' : function([c_int32]),
             'SetSpool' : function([c_int32, c_int32, c_char_p, c_int32]),
             'SetSpoolThreadCount' : function([c_int32]),
             'SetStorageMode' : function([c_int32]),
             'SetTECEvent' : function([c_int32]),
             'SetTemperature' : function([c_int32]),
             'SetTemperatureEvent' : function([c_int32]),
             'SetTriggerMode' : function([c_int32]),
             'SetTriggerInvert' : function([c_int32]),
             'GetTriggerLevelRange' : function([c_float_p, c_float_p]),
             'SetTriggerLevel' : function([c_float]),
             'SetIODirection' : function([c_int32, c_int32]),
             'SetIOLevel' : function([c_int32, c_int32]),
             'SetUserEvent' : function([c_int32]),
             'SetUSGenomics' : function([c_int32, c_int32]),
             'SetVerticalRowBuffer' : function([c_int32]),
             'SetVerticalSpeed' : function([c_int32]),
             'SetVirtualChip' : function([c_int32]),
             'SetVSAmplitude' : function([c_int32]),
             'SetVSSpeed' : function([c_int32]),
             'ShutDown' : function([]),
             'StartAcquisition' : function([]),
             'UnMapPhysicalAddress' : function([]),
             'UpdateDDGTimings' : function([]),
             'WaitForAcquisition' : function([]),
             'WaitForAcquisitionByHandle' : function([c_int32]),
             'WaitForAcquisitionByHandleTimeOut' : function([c_int32, c_int32]),
             'WaitForAcquisitionTimeOut' : function([c_int32]),
             'WhiteBalance' : function([c_int16_p, c_int16_p, c_int16_p, c_float_p, c_float_p, ctypes.POINTER(WhiteBalanceInfo)]), #NEEDS WORK

             'OA_Initialize' : function([c_char_p, c_int32]),
             'OA_EnableMode' : function([c_char_p]),
             'OA_GetModeAcqParams' : function([c_char_p, c_char_p]),
             'OA_GetUserModeNames' : function([c_char_p]),
             'OA_GetPreSetModeNames' : function([c_char_p]),
             'OA_GetNumberOfUserModes' : function([c_int32_p]),
             'OA_GetNumberOfPreSetModes' : function([c_int32_p]),
             'OA_GetNumberOfAcqParams' : function([c_char_p, c_int32_p]),
             'OA_AddMode' : function([c_char_p, c_int32, c_char_p, c_int32]),
             'OA_WriteToFile' : function([c_char_p, c_int32]),
             'OA_DeleteMode' : function([c_char_p, c_int32]),
             'OA_SetInt' : function([c_char_p, c_char_p, c_int32]),
             'OA_SetFloat' : function([c_char_p, c_char_p, c_float]),
             'OA_SetString' : function([c_char_p, c_char_p, c_char_p, c_int32]),
             'OA_GetInt' : function([c_char_p, c_char_p, c_int32_p]),
             'OA_GetFloat' : function([c_char_p, c_char_p, c_float_p]),
             'OA_GetString' : function([c_char_p, c_char_p, c_char_p, c_int32]),
             
             'Filter_SetMode' : function([c_int32]),
             'Filter_GetMode' : function([c_int32_p]),
             'Filter_SetThreshold' : function([c_float]),
             'Filter_GetThreshold' : function([c_float_p]),
             'Filter_SetDataAveragingMode' : function([c_int32]),
             'Filter_GetDataAveragingMode' : function([c_int32_p]),
             'Filter_SetAveragingFrameCount' : function([c_int32]),
             'Filter_GetAveragingFrameCount' : function([c_int32_p]),
             'Filter_SetAveragingFactor' : function([c_int32]),
             'Filter_GetAveragingFactor' : function([c_int32_p]),
             
             'PostProcessNoiseFilter' : function([c_int32_p, c_int32_p, c_int32, c_int32, c_int32, c_float, c_int32, c_int32]),
             'PostProcessCountConvert' : function([c_int32_p, c_int32_p, c_int32, c_int32, c_int32, c_int32, c_int32, c_float, c_float, c_int32, c_int32]),
             'PostProcessPhotonCounting' : function([c_int32_p, c_int32_p, c_int32, c_int32, c_int32, c_int32, c_float_p, c_int32, c_int32]),
             'PostProcessDataAveraging' : function([c_int32_p, c_int32_p, c_int32, c_int32, c_int32, c_int32, c_int32, c_int32, c_int32])
}

acqMode = {'AC_ACQMODE_SINGLE':1,
           'AC_ACQMODE_VIDEO':2,
           'AC_ACQMODE_ACCUMULATE':4,
           'AC_ACQMODE_KINETIC':8,
           'AC_ACQMODE_FRAMETRANSFER':16,
           'AC_ACQMODE_FASTKINETICS':32,
           'AC_ACQMODE_OVERLAP':64}
                                          
readMode = {'AC_READMODE_FULLIMAGE':1,
            'AC_READMODE_SUBIMAGE':2,
            'AC_READMODE_SINGLETRACK':4,
            'AC_READMODE_FVB':8,
            'AC_READMODE_MULTITRACK':16,
            'AC_READMODE_RANDOMTRACK':32,
            'AC_READMODE_MULTITRACKSCAN':64}

triggerMode = {'AC_TRIGGERMODE_INTERNAL':1,
               'AC_TRIGGERMODE_EXTERNAL':2,
               'AC_TRIGGERMODE_EXTERNAL_FVB_EM':4,
               'AC_TRIGGERMODE_CONTINUOUS':8,
               'AC_TRIGGERMODE_EXTERNALSTART':16,
               'AC_TRIGGERMODE_EXTERNALEXPOSURE':32,
               'AC_TRIGGERMODE_INVERTED':int(0x40),
               'AC_TRIGGERMODE_EXTERNAL_CHARGESHIFTING':int(0x80)}

cameraType = {0:'AC_CAMERATYPE_PDA',
              1:'AC_CAMERATYPE_IXON',
              2:'AC_CAMERATYPE_ICCD',
              3:'AC_CAMERATYPE_EMCCD',
              4:'AC_CAMERATYPE_CCD',
              5:'AC_CAMERATYPE_ISTAR',
              6:'AC_CAMERATYPE_VIDEO',
              7:'AC_CAMERATYPE_IDUS',
              8:'AC_CAMERATYPE_NEWTON',
              9:'AC_CAMERATYPE_SURCAM',
              10:'AC_CAMERATYPE_USBICCD',
              11:'AC_CAMERATYPE_LUCA',
              12:'AC_CAMERATYPE_RESERVED',
              13:'AC_CAMERATYPE_IKON',
              14:'AC_CAMERATYPE_INGAAS',
              15:'AC_CAMERATYPE_IVAC',
              16:'AC_CAMERATYPE_UNPROGRAMMED',
              17:'AC_CAMERATYPE_CLARA',
              18:'AC_CAMERATYPE_USBISTAR',
              19:'AC_CAMERATYPE_SIMCAM',
              20:'AC_CAMERATYPE_NEO',
              21:'AC_CAMERATYPE_IXONULTRA',
              22:'AC_CAMERATYPE_VOLMOS',
              23:'AC_CAMERATYPE_IVAC_CCD',
              24:'AC_CAMERATYPE_ASPEN',
              25:'AC_CAMERATYPE_ASCENT',
              26:'AC_CAMERATYPE_ALTA',
              27:'AC_CAMERATYPE_ALTAF',
              28:'AC_CAMERATYPE_IKONXL',
              29:'AC_CAMERATYPE_RES1'}

pixelMode = {'AC_PIXELMODE_8BIT':1,
             'AC_PIXELMODE_14BIT':2,
             'AC_PIXELMODE_16BIT':4,
             'AC_PIXELMODE_32BIT':8,
             'AC_PIXELMODE_MONO':int(0x0),
             'AC_PIXELMODE_RGB':int(0x10000),
             'AC_PIXELMODE_CMY':int(0x20000)}

setFunction = {'AC_SETFUNCTION_VREADOUT':int(0x1),
               'AC_SETFUNCTION_HREADOUT':int(0x2),
               'AC_SETFUNCTION_TEMPERATURE':int(0x4),
               'AC_SETFUNCTION_MCPGAIN':int(0x8),
               'AC_SETFUNCTION_EMCCDGAIN':int(0x10),
               'AC_SETFUNCTION_BASELINECLAMP':int(0x20),
               'AC_SETFUNCTION_VSAMPLITUDE':int(0x40),
               'AC_SETFUNCTION_HIGHCAPACITY':int(0x80),
               'AC_SETFUNCTION_BASELINEOFFSET':int(0x100),
               'AC_SETFUNCTION_PREAMPGAIN':int(0x200),
               'AC_SETFUNCTION_CROPMODE':int(0x400),
               'AC_SETFUNCTION_DMAPARAMETERS':int(0x800),
               'AC_SETFUNCTION_HORIZONTALBIN':int(0x1000),
               'AC_SETFUNCTION_MULTITRACKHRANGE':int(0x2000),
               'AC_SETFUNCTION_RANDOMTRACKNOGAPS':int(0x4000),
               'AC_SETFUNCTION_EMADVANCED':int(0x8000),
               'AC_SETFUNCTION_GATEMODE':int(0x10000),
               'AC_SETFUNCTION_DDGTIMES':int(0x20000),
               'AC_SETFUNCTION_IOC':int(0x40000),
               'AC_SETFUNCTION_INTELLIGATE':int(0x80000),
               'AC_SETFUNCTION_INSERTION_DELAY':int(0x100000),
               'AC_SETFUNCTION_GATESTEP':int(0x200000),
               'AC_SETFUNCTION_GATEDELAYSTEP':int(0x200000), #error here???
               'AC_SETFUNCTION_TRIGGERTERMINATION':int(0x400000),
               'AC_SETFUNCTION_EXTENDEDNIR':int(0x800000),
               'AC_SETFUNCTION_SPOOLTHREADCOUNT':int(0x1000000),
               'AC_SETFUNCTION_REGISTERPACK':int(0x2000000),
               'AC_SETFUNCTION_PRESCANS':int(0x4000000),
               'AC_SETFUNCTION_GATEWIDTHSTEP':int(0x8000000),
               'AC_SETFUNCTION_EXTENDED_CROP_MODE':int(0x10000000),
               'AC_SETFUNCTION_SUPERKINETICS':int(0x20000000),
               'AC_SETFUNCTION_TIMESCAN':int(0x40000000)
               #Deprecated for AC_SETFUNCTION_MCPGAIN
               
               #AC_SETFUNCTION_GAIN = 8
               #AC_SETFUNCTION_ICCDGAIN = 8
}

getFunction = {'AC_GETFUNCTION_TEMPERATURE':int(0x1),
               'AC_GETFUNCTION_TARGETTEMPERATURE':int(0x2),
               'AC_GETFUNCTION_TEMPERATURERANGE':int(0x4),
               'AC_GETFUNCTION_DETECTORSIZE':int(0x8),
               'AC_GETFUNCTION_MCPGAIN':int(0x10),
               'AC_GETFUNCTION_EMCCDGAIN':int(0x20),
               'AC_GETFUNCTION_HVFLAG':int(0x40),
               'AC_GETFUNCTION_GATEMODE':int(0x80),
               'AC_GETFUNCTION_DDGTIMES':int(0x100),
               'AC_GETFUNCTION_IOC':int(0x200),
               'AC_GETFUNCTION_INTELLIGATE':int(0x400),
               'AC_GETFUNCTION_INSERTION_DELAY':int(0x800),
               'AC_GETFUNCTION_GATESTEP':int(0x1000),
               'AC_GETFUNCTION_GATEDELAYSTEP':int(0x1000), #Error in the Visual basic sdk?
               'AC_GETFUNCTION_PHOSPHORSTATUS':int(0x2000),
               'AC_GETFUNCTION_MCPGAINTABLE':int(0x4000),
               'AC_GETFUNCTION_BASELINECLAMP':int(0x8000),
               'AC_GETFUNCTION_GATEWIDTHSTEP':int(0x10000)

               # Deprecated for AC_GETFUNCTION_MCPGAIN '
                                
               #AC_GETFUNCTION_GAIN = &H10
               #AC_GETFUNCTION_ICCDGAIN = &H10
}


features = {'AC_FEATURES_POLLING':1,
            'AC_FEATURES_EVENTS':2,
            'AC_FEATURES_SPOOLING':4,
            'AC_FEATURES_SHUTTER':8,
            'AC_FEATURES_SHUTTEREX':16,
            'AC_FEATURES_EXTERNAL_I2C':32,
            'AC_FEATURES_SATURATIONEVENT':64,
            'AC_FEATURES_FANCONTROL':128,
            'AC_FEATURES_MIDFANCONTROL':256,
            'AC_FEATURES_TEMPERATUREDURINGACQUISITION':512,
            'AC_FEATURES_KEEPCLEANCONTROL':1024,
            'AC_FEATURES_DDGLITE':int(0x800),
            'AC_FEATURES_FTEXTERNALEXPOSURE':int(0x1000),
            'AC_FEATURES_KINETICEXTERNALEXPOSURE':int(0x2000),
            'AC_FEATURES_DACCONTROL':int(0x4000),
            'AC_FEATURES_METADATA':int(0x8000),
            'AC_FEATURES_IOCONTROL':int(0x10000),
            'AC_FEATURES_PHOTONCOUNTING':int(0x20000),
            'AC_FEATURES_COUNTCONVERT':int(0x40000),
            'AC_FEATURES_DUALMODE':int(0x80000),
            'AC_FEATURES_OPTACQUIRE':int(0x100000),
            'AC_FEATURES_REALTIMESPURIOUSNOISEFILTER':int(0x200000),
            'AC_FEATURES_POSTPROCESSSPURIOUSNOISEFILTER':int(0x400000),
            'AC_FEATURES_DUALPREAMPGAIN':int(0x800000),
            'AC_FEATURES_DEFECT_CORRECTION':int(0x1000000),
            'AC_FEATURES_STARTOFEXPOSURE_EVENT':int(0x2000000),
            'AC_FEATURES_ENDOFEXPOSURE_EVENT':int(0x4000000),
            'AC_FEATURES_CAMERALINK':int(0x8000000),
            'AC_FEATURES_FIFOFULL_EVENT':int(0x10000000),
            'AC_FEATURES_SENSOR_PORT_CONFIGURATION':int(0x20000000),
            'AC_FEATURES_SENSOR_COMPENSATION':int(0x40000000),
            'AC_FEATURES_IRIG_SUPPORT':int(0x80000000)}
             
EMGain = {'AC_EMGAIN_8BIT':1,
          'AC_EMGAIN_12BIT':2,
          'AC_EMGAIN_LINEAR12':4,
          'AC_EMGAIN_REAL12':8}
            
error = {20001:'DRV_ERROR_CODES',
         20002:'DRV_SUCCESS',
         20003:'DRV_VXDNOTINSTALLED',
         20004:'DRV_ERROR_SCAN',
         20005:'DRV_ERROR_CHECK_SUM',
         20006:'DRV_ERROR_FILELOAD',
         20007:'DRV_UNKNOWN_FUNCTION',
         20008:'DRV_ERROR_VXD_INIT',
         20009:'DRV_ERROR_ADDRESS',
         20010:'DRV_ERROR_PAGELOCK',
         20011:'DRV_ERROR_PAGEUNLOCK',
         20012:'DRV_ERROR_BOARDTEST',
         20013:'DRV_ERROR_ACK',
         20014:'DRV_ERROR_UP_FIFO',
         20015:'DRV_ERROR_PATTERN',

         20017:'DRV_ACQUISITION_ERRORS',
         20018:'DRV_ACQ_BUFFER',
         20019:'DRV_ACQ_DOWNFIFO_FULL',
         20020:'DRV_PROC_UNKONWN_INSTRUCTION',
         20021:'DRV_ILLEGAL_OP_CODE',
         20022:'DRV_KINETIC_TIME_NOT_MET',
         20023:'DRV_ACCUM_TIME_NOT_MET',
         20024:'DRV_NO_NEW_DATA',
         20025:'DRV_PCI_DMA_FAIL',
         20026:'DRV_SPOOLERROR',
         20027:'DRV_SPOOLSETUPERROR',
         20028:'DRV_FILESIZELIMITERROR',
         20029:'DRV_ERROR_FILESAVE',

         20033:'DRV_TEMPERATURE_CODES',
         20034:'DRV_TEMPERATURE_OFF',
         20035:'DRV_TEMPERATURE_NOT_STABILIZED',
         20036:'DRV_TEMPERATURE_STABILIZED',
         20037:'DRV_TEMPERATURE_NOT_REACHED',
         20038:'DRV_TEMPERATURE_OUT_RANGE',
         20039:'DRV_TEMPERATURE_NOT_SUPPORTED',
         20040:'DRV_TEMPERATURE_DRIFT',

         20049:'DRV_GENERAL_ERRORS',
         20050:'DRV_INVALID_AUX',
         20051:'DRV_COF_NOTLOADED',
         20052:'DRV_FPGAPROG',
         20053:'DRV_FLEXERROR',
         20054:'DRV_GPIBERROR',
         20055:'DRV_EEPROMVERSIONERROR',

         20064:'DRV_DATATYPE',
         20065:'DRV_DRIVER_ERRORS',
         20066:'DRV_P1INVALID',
         20067:'DRV_P2INVALID',
         20068:'DRV_P3INVALID',
         20069:'DRV_P4INVALID',
         20070:'DRV_INIERROR',
         20071:'DRV_COFERROR',
         20072:'DRV_ACQUIRING',
         20073:'DRV_IDLE',
         20074:'DRV_TEMPCYCLE',
         20075:'DRV_NOT_INITIALIZED ',
         20076:'DRV_P5INVALID',
         20077:'DRV_P6INVALID',
         20078:'DRV_INVALID_MODE',
         20079:'DRV_INVALID_FILTER',

         20080:'DRV_I2CERRORS',
         20081:'DRV_I2CDEVNOTFOUND',
         20082:'DRV_I2CTIMEOUT',
         20083:'DRV_P7INVALID',
         20084:'DRV_P8INVALID',
         20085:'DRV_P9INVALID',
         20086:'DRV_P10INVALID',
         20087:'DRV_P11INVALID',

         20089:'DRV_USBERROR',
         20090:'DRV_IOCERROR',
         20091:'DRV_VRMVERSIONERROR',
         20092:'DRV_GATESTEPERROR',
         20093:'DRV_USB_INTERRUPT_ENDPOINT_ERROR',
         20094:'DRV_RANDOM_TRACK_ERROR',
         20095:'DRV_INVALID_TRIGGER_MODE',
         20096:'DRV_LOAD_FIRMWARE_ERROR',
         20097:'DRV_DIVIDE_BY_ZERO_ERROR',
         20098:'DRV_INVALID_RINGEXPOSURES',
         20099:'DRV_BINNING_ERROR',
         20100:'DRV_INVALID_AMPLIFIER',
         20101:'DRV_INVALID_COUNTCONVERT_MODE',

         20990:'DRV_ERROR_NOCAMERA',
         20991:'DRV_NOT_SUPPORTED',
         20992:'DRV_NOT_AVAILABLE',

         20115:'DRV_ERROR_MAP',
         20116:'DRV_ERROR_UNMAP',
         20117:'DRV_ERROR_MDL',
         20118:'DRV_ERROR_UNMDL',
         20119:'DRV_ERROR_BUFFSIZE',
         20121:'DRV_ERROR_NOHANDLE',

         20130:'DRV_GATING_NOT_AVAILABLE',
         20131:'DRV_FPGA_VOLTAGE_ERROR',

         20150:'DRV_OW_CMD_FAIL',
         20151:'DRV_OWMEMORY_BAD_ADDR',
         20152:'DRV_OWCMD_NOT_AVAILABLE',
         20153:'DRV_OW_NO_SLAVES',
         20154:'DRV_OW_NOT_INITIALIZED',
         20155:'DRV_OW_ERROR_SLAVE_NUM',
         20156:'DRV_MSTIMINGS_ERROR',

         20173:'DRV_OA_NULL_ERROR',
         20174:'DRV_OA_PARSE_DTD_ERROR',
         20175:'DRV_OA_DTD_VALIDATE_ERROR',
         20176:'DRV_OA_FILE_ACCESS_ERROR',
         20177:'DRV_OA_FILE_DOES_NOT_EXIST',
         20178:'DRV_OA_XML_INVALID_OR_NOT_FOUND_ERROR',
         20179:'DRV_OA_PRESET_FILE_NOT_LOADED',
         20180:'DRV_OA_USER_FILE_NOT_LOADED',
         20181:'DRV_OA_PRESET_AND_USER_FILE_NOT_LOADED',
         20182:'DRV_OA_INVALID_FILE',
         20183:'DRV_OA_FILE_HAS_BEEN_MODIFIED',
         20184:'DRV_OA_BUFFER_FULL',
         20185:'DRV_OA_INVALID_STRING_LENGTH',
         20186:'DRV_OA_INVALID_CHARS_IN_NAME',
         20187:'DRV_OA_INVALID_NAMING',
         20188:'DRV_OA_GET_CAMERA_ERROR',
         20189:'DRV_OA_MODE_ALREADY_EXISTS',
         20190:'DRV_OA_STRINGS_NOT_EQUAL',
         20191:'DRV_OA_NO_USER_DATA',
         20192:'DRV_OA_VALUE_NOT_SUPPORTED',
         20193:'DRV_OA_MODE_DOES_NOT_EXIST',
         20194:'DRV_OA_CAMERA_NOT_SUPPORTED',
         20195:'DRV_OA_FAILED_TO_GET_MODE',

         20211:'DRV_PROCESSING_FAILED'
}

ignoreMessages = (20002, 20034, 20035, 20036, 20037, 20040, 20073)

class AndorError(Exception):

    def __init__(self, message, error):
        super(AndorError, self).__init__(message)
        self.error = error

def _andorFuncGen(func):
    """ This function handles the necessary Andor camera error handling
    while also evaluating the function"""
    def output(*args, **kwargs):
        val = ctypes.c_int32
        val = func(*args, **kwargs)
        if not val in ignoreMessages:
            raise AndorError('Andor Camera Code %d : %s' % (val, error[val]), val)
        else:
            pass
        return val
    return output

for func in functions:
    try:
        vars()[func] = _andorFuncGen(__atmcd32d__[func])
        vars()[func].argtypes = functions[func]['argtypes']
        vars()[func].restype = functions[func]['restype']
    except Exception:
        pass
